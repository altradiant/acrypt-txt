Вы уже хорошо знакомы с потоковыми шифрами, поэтому вам будет полезно знать, как работают блочные шифры и чем они отличаются от потоковых.

### **Основное отличие: обработка данных**

- **Потоковые шифры**: Обрабатывают данные побитно или побайтно. Они генерируют поток ключей (гамму) и накладывают его на открытый текст с помощью операции XOR (в основном). Это делает их идеальными для работы в реальном времени, так как данные могут шифроваться и расшифровываться по мере поступления.

- **Блочные шифры**: Обрабатывают данные блоками фиксированной длины (например, 64, 128 или 256 бит). Каждый блок шифруется отдельно, и результат шифрования зависит только от данных в этом блоке и ключа. Это требует, чтобы данные были дополнены до размера блока, если их длина не кратна размеру блока.

### **Принцип работы блочных шифров**

Блочные шифры работают по принципу **сети Фейстеля** или **SP-сети** (Substitution-Permutation Network). Вот основные шаги:

1. **Разделение на блоки**: Данные разбиваются на блоки фиксированной длины.
2. **Шифрование блока**: Каждый блок обрабатывается отдельно с использованием ключа и сложных математических преобразований (например, перестановки, подстановки, XOR с ключом).
3. **Режимы работы**: Блочные шифры могут работать в различных режимах (например, ECB, CBC, CTR, GCM), которые определяют, как блоки связаны между собой.

### **Режимы работы блочных шифров**

Режимы работы определяют, как блоки данных обрабатываются и связываются между собой. Вот основные режимы:

1. **ECB (Electronic Codebook)**:
   - Каждый блок шифруется независимо.
   - Уязвим к анализу, так как одинаковые блоки открытого текста шифруются в одинаковые блоки зашифрованного текста.

2. **CBC (Cipher Block Chaining)**:
   - Каждый блок открытого текста XOR'ится с предыдущим блоком зашифрованного текста перед шифрованием.
   - Требует инициализационного вектора (IV) для первого блока. Используется, чтобы минимизировать возможные уязвимости в рассекречивании шифра (позволяет генерировать разные шифротексты)

3. **CTR (Counter Mode)**:
   - Блочный шифр работает как потоковый. Генерируется последовательность чисел (счетчик), которые шифруются и накладываются на открытый текст с помощью XOR.
   - Поддерживает параллельное шифрование и расшифровку.
   - Обычно к счётчику префиксом ставится nonce, чтобы минимизировать возможные уязвимости в рассекречивании шифра (позволяет генерировать разные шифротексты, как IV).

4. **GCM (Galois/Counter Mode)**:
   - Режим CTR с добавлением аутентификации данных.
   - Шифрует данные и генерирует тег аутентификации для проверки целостности данных.

- IV или nonce не требуется быть секретным, но нужно, чтобы он был достаточно непредсказуемым. Обычно, IV или nonce ставится перед шифротекстом, чтобы осуществить его передачу получателю.

### **Преимущества блочных шифров**

1. **Высокая стойкость к криптоанализу**: Блочные шифры, такие как AES, считаются одними из самых безопасных алгоритмов.
2. **Режимы работы**: Различные режимы позволяют адаптировать блочные шифры для конкретных задач, включая аутентификацию данных (GCM).
3. **Параллелизм**: В режимах, таких как CTR, блочные шифры могут обрабатывать блоки параллельно, что ускоряет процесс шифрования.

**Пример: AES в режиме CTR**

Если вы знакомы с потоковыми шифрами, то режим CTR (Counter Mode) для блочных шифров будет вам знаком. В этом режиме блочный шифр AES работает как потоковый:

1. Генерируется последовательность чисел (счетчик), которые шифруются с использованием ключа.
2. Результат шифрования (гамма) накладывается на открытый текст с помощью операции XOR.
3. Шифрование и расшифровывание могут выполняться параллельно, что делает режим CTR очень быстрым и эффективным.

На этот раздел отведено два задания.

Блочные шифры — это мощный инструмент для защиты данных, который, в отличие от потоковых шифров, работает с блоками фиксированной длины. Они обеспечивают высокую стойкость к криптоанализу и поддерживают различные режимы работы, включая аутентификацию данных. В основном, мы будем использовать режимы CBC и CTR при работе с блочными шифрами.